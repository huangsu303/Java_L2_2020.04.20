一、简答题
1、Mybatis动态sql是做什么的？都有哪些动态sql？简述一下动态sql的执行原理？
答：
动态sql是为了满足业务逻辑复杂的场景调用的，可以让我们在Xml映射文件内，以标签的形式编写动态sql，完成逻辑判断和动态拼接sql的功能，可以更优雅更方便的帮助我们拼接sql语句。
动态sql有：trim标签、where标签、set标签、foreach标签、if标签、choose标签、when标签、otherwise标签、bind标签、sql片段。
执行原理：使用OGNL从sql参数对象中计算表达式的值，根据表达式的值动态拼接sql，以此来完成动态sql的功能。


2、Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？
答：
Mybatis支持延迟加载。
实现原理：使用CGLIB创建目标对象的代理对象，当调用get方法时，进入拦截器方法，拦截器方法发现该属性值为null，则执行绑定的sql进行查询并调用set方法进行赋值。


3、Mybatis都有哪些Executor执行器？它们之间的区别是什么？
答：
Mybatis的Executor执行器有：SimpleExecutor、ReuseExecutor、BatchExecutor。
区别：
SimpleExecutor - 每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。
ReuseExecutor  - 执行update或select时，以sql作为key查找Statement对象，存在则使用，不存在则创建，用完后不关闭Statement对象，仍放在Map中，供下次使用。即重复使用Statement对象。
BatchExecutor  - 执行update时，将所有sql都添加到批处理中统一执行，缓存了多个Statement对象，每个Statement对象都是先将sql添加完毕后，再统一执行。


4、简述下Mybatis的一级、二级缓存（分别从存储结构、范围、失效场景。三个方面来作答）？
答：
Mybatis的一级缓存是SqlSession级别的，作用域是SqlSession，Mybatis默认开启一级缓存，在同一个SqlSession中，相同的Sql执行查询操作，第一次查询会先从缓存中获取，由于缓存中没有数据，会再从数据库查询，并将查询结果缓存到HashMap中，下一次查询仍先从缓存中获取，由于缓存中已经有了数据，所以不会执行SQL语句去查询数据库。这部分数据在进行增删改操作时，缓存失效。
Mybatis的二级缓存是mapper级别的，多个SqlSession操作同一个mapper的sql语句，多个SqlSession共用二级缓存，二级缓存是跨SqlSession的。第一次调用mapper下的sql执行查询时，查询到的数据会存放到该mapper对应的二级缓存，第二次调用mapper下的同一sql执行查询时，会从对应的二级缓存获取数据，使用二级缓存时需要在select标签上添加useCache属性并赋值为true，在更新和删除操作时候需要主动调用flushCache刷新缓存。


5、简述Mybatis的插件运行原理，以及如何编写一个插件？
答：
Mybatis的插件运行原理：使用JDK的动态代理为需要拦截的接口生成代理对象，然后实现接口的拦截方法，当执行需要拦截的接口方法时，会进入拦截方法。
插件编写步骤：
（1）编写Intercepror接口的实现类。
（2）设置插件的签名，配置需要拦截的对象和方法。
（3）在全局配置文件中注册该插件。

